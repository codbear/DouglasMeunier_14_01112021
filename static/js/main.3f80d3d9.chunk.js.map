{"version":3,"sources":["router/constants/routes.js","services/formikValidation.js","constants/states.js","components/TextFieldFormik/TextFieldFormik.jsx","components/DatePickerFormik/DatePickerFormik.jsx","components/SelectFormik/SelectFormik.jsx","images/hr_net_logo.svg","components/Layout/Layout.jsx","contexts/employeesContext.jsx","screens/EmployeeCreateScreen.jsx","screens/EmployeeListScreen.jsx","router/components/Router/Router.jsx","App.js","reportWebVitals.js","index.js"],"names":["ROUTES","EMPLOYEE","INDEX","CREATE","REGEX","ZIP_CODE","validateField","validationArray","value","error","some","validator","isRequired","isDate","isValid","isZipCode","test","STATES","name","abbreviation","TextFieldFormik","label","type","validators","otherProps","enhancedValidators","isRequiredValidator","validate","formikProps","form","field","touched","errors","TextField","id","Boolean","variant","helperText","defaultProps","DatePickerFormik","DatePicker","onChange","setFieldValue","renderInput","params","SelectFormik","options","children","select","defaultValue","map","option","MenuItem","Offset","styled","theme","mixins","toolbar","Layout","action","AppBar","sx","backgroundColor","Toolbar","justifyContent","Box","component","src","hrNetLogo","alt","maxHeight","m","Typography","style","visuallyHidden","p","EmployeesContext","createContext","displayName","EmployeesProvider","useState","employees","setEmployees","Provider","saveEmployee","employee","birthDate","format","startDate","EmployeeCreateScreen","history","useHistory","isModalOpen","setIsModalOpen","useContext","Grid","display","gridTemplateColumns","gap","spacing","Button","Link","to","initialValues","firstName","lastName","street","city","state","zipCode","department","onSubmit","values","formikHelpers","resetForm","Card","px","py","mb","textAlign","fullWidth","gridColumn","mt","size","Dialog","open","DialogTitle","DialogActions","onClick","push","autoFocus","columns","dataField","header","isSortable","EmployeeListScreen","itemsPerPage","setItemsPerPage","data","hasSearchBar","onChangeItemsPerPage","Router","exact","path","App","LocalizationProvider","dateAdapter","DateAdapter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f80d3d9.chunk.js","sourcesContent":["const ROUTES = {\n  EMPLOYEE: {\n    INDEX: '/',\n    CREATE: '/create',\n  },\n};\n\nexport default ROUTES;\n","import { isValid } from 'date-fns';\n\nconst REGEX = {\n  ZIP_CODE: /^[0-9]{5}$/,\n};\n\nexport const validateField = (validationArray) => (value) => {\n  let error;\n\n  if (!validationArray) {\n    return error;\n  }\n\n  validationArray.some((validator) => {\n    error = validator(value);\n    return !!error;\n  });\n\n  return error;\n};\n\nexport const isRequired = (value) => {\n  if (!value) {\n    return 'This field is required';\n  }\n\n  return undefined;\n};\n\nexport const isDate = (value) => {\n  const isValidDate = isValid(value);\n\n  if (!isValidDate) {\n    return 'Use a valid date mm/dd/yyyy';\n  }\n\n  return undefined;\n};\n\nexport const isZipCode = (value) => {\n  const isValidZipCode = REGEX.ZIP_CODE.test(value);\n\n  if (!isValidZipCode) {\n    return 'Use a valid zip code';\n  }\n\n  return undefined;\n};\n","const STATES = [\n  {\n    name: 'Alabama',\n    abbreviation: 'AL',\n  },\n  {\n    name: 'Alaska',\n    abbreviation: 'AK',\n  },\n  {\n    name: 'American Samoa',\n    abbreviation: 'AS',\n  },\n  {\n    name: 'Arizona',\n    abbreviation: 'AZ',\n  },\n  {\n    name: 'Arkansas',\n    abbreviation: 'AR',\n  },\n  {\n    name: 'California',\n    abbreviation: 'CA',\n  },\n  {\n    name: 'Colorado',\n    abbreviation: 'CO',\n  },\n  {\n    name: 'Connecticut',\n    abbreviation: 'CT',\n  },\n  {\n    name: 'Delaware',\n    abbreviation: 'DE',\n  },\n  {\n    name: 'District Of Columbia',\n    abbreviation: 'DC',\n  },\n  {\n    name: 'Federated States Of Micronesia',\n    abbreviation: 'FM',\n  },\n  {\n    name: 'Florida',\n    abbreviation: 'FL',\n  },\n  {\n    name: 'Georgia',\n    abbreviation: 'GA',\n  },\n  {\n    name: 'Guam',\n    abbreviation: 'GU',\n  },\n  {\n    name: 'Hawaii',\n    abbreviation: 'HI',\n  },\n  {\n    name: 'Idaho',\n    abbreviation: 'ID',\n  },\n  {\n    name: 'Illinois',\n    abbreviation: 'IL',\n  },\n  {\n    name: 'Indiana',\n    abbreviation: 'IN',\n  },\n  {\n    name: 'Iowa',\n    abbreviation: 'IA',\n  },\n  {\n    name: 'Kansas',\n    abbreviation: 'KS',\n  },\n  {\n    name: 'Kentucky',\n    abbreviation: 'KY',\n  },\n  {\n    name: 'Louisiana',\n    abbreviation: 'LA',\n  },\n  {\n    name: 'Maine',\n    abbreviation: 'ME',\n  },\n  {\n    name: 'Marshall Islands',\n    abbreviation: 'MH',\n  },\n  {\n    name: 'Maryland',\n    abbreviation: 'MD',\n  },\n  {\n    name: 'Massachusetts',\n    abbreviation: 'MA',\n  },\n  {\n    name: 'Michigan',\n    abbreviation: 'MI',\n  },\n  {\n    name: 'Minnesota',\n    abbreviation: 'MN',\n  },\n  {\n    name: 'Mississippi',\n    abbreviation: 'MS',\n  },\n  {\n    name: 'Missouri',\n    abbreviation: 'MO',\n  },\n  {\n    name: 'Montana',\n    abbreviation: 'MT',\n  },\n  {\n    name: 'Nebraska',\n    abbreviation: 'NE',\n  },\n  {\n    name: 'Nevada',\n    abbreviation: 'NV',\n  },\n  {\n    name: 'New Hampshire',\n    abbreviation: 'NH',\n  },\n  {\n    name: 'New Jersey',\n    abbreviation: 'NJ',\n  },\n  {\n    name: 'New Mexico',\n    abbreviation: 'NM',\n  },\n  {\n    name: 'New York',\n    abbreviation: 'NY',\n  },\n  {\n    name: 'North Carolina',\n    abbreviation: 'NC',\n  },\n  {\n    name: 'North Dakota',\n    abbreviation: 'ND',\n  },\n  {\n    name: 'Northern Mariana Islands',\n    abbreviation: 'MP',\n  },\n  {\n    name: 'Ohio',\n    abbreviation: 'OH',\n  },\n  {\n    name: 'Oklahoma',\n    abbreviation: 'OK',\n  },\n  {\n    name: 'Oregon',\n    abbreviation: 'OR',\n  },\n  {\n    name: 'Palau',\n    abbreviation: 'PW',\n  },\n  {\n    name: 'Pennsylvania',\n    abbreviation: 'PA',\n  },\n  {\n    name: 'Puerto Rico',\n    abbreviation: 'PR',\n  },\n  {\n    name: 'Rhode Island',\n    abbreviation: 'RI',\n  },\n  {\n    name: 'South Carolina',\n    abbreviation: 'SC',\n  },\n  {\n    name: 'South Dakota',\n    abbreviation: 'SD',\n  },\n  {\n    name: 'Tennessee',\n    abbreviation: 'TN',\n  },\n  {\n    name: 'Texas',\n    abbreviation: 'TX',\n  },\n  {\n    name: 'Utah',\n    abbreviation: 'UT',\n  },\n  {\n    name: 'Vermont',\n    abbreviation: 'VT',\n  },\n  {\n    name: 'Virgin Islands',\n    abbreviation: 'VI',\n  },\n  {\n    name: 'Virginia',\n    abbreviation: 'VA',\n  },\n  {\n    name: 'Washington',\n    abbreviation: 'WA',\n  },\n  {\n    name: 'West Virginia',\n    abbreviation: 'WV',\n  },\n  {\n    name: 'Wisconsin',\n    abbreviation: 'WI',\n  },\n  {\n    name: 'Wyoming',\n    abbreviation: 'WY',\n  },\n];\n\nexport default STATES;\n","import PropTypes from 'prop-types';\nimport { Field } from 'formik';\n\nimport { TextField } from '@mui/material';\n\nimport { validateField, isRequired as isRequiredValidator } from '../../services';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  validators: PropTypes.arrayOf(PropTypes.func),\n  isRequired: PropTypes.bool,\n};\n\nconst defaultProps = {\n  type: 'text',\n  validators: [],\n  isRequired: false,\n};\n\nconst TextFieldFormik = ({ name, label, type, isRequired, validators, ...otherProps }) => {\n  const enhancedValidators = [...(isRequired ? [isRequiredValidator] : []), ...validators];\n\n  return (\n    <Field name={name} validate={validateField(enhancedValidators)}>\n      {(formikProps) => {\n        const { form, field } = formikProps;\n        const error = form.touched[field.name] && form.errors[field.name];\n\n        return (\n          <TextField\n            {...formikProps.field}\n            {...otherProps}\n            id={`field${field.name}`}\n            label={label}\n            error={Boolean(error)}\n            variant=\"outlined\"\n            type={type}\n            helperText={error || ''}\n          />\n        );\n      }}\n    </Field>\n  );\n};\n\nTextFieldFormik.propTypes = propTypes;\nTextFieldFormik.defaultProps = defaultProps;\n\nexport default TextFieldFormik;\n","import PropTypes from 'prop-types';\nimport { Field } from 'formik';\n\nimport { TextField } from '@mui/material';\n\nimport { validateField, isRequired as isRequiredValidator } from '../../services';\nimport { DatePicker } from '@mui/lab';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  validators: PropTypes.arrayOf(PropTypes.func),\n  isRequired: PropTypes.bool,\n};\n\nconst defaultProps = {\n  validators: [],\n  isRequired: false,\n};\n\nconst DatePickerFormik = ({ name, label, isRequired, validators, ...otherProps }) => {\n  const enhancedValidators = [...(isRequired ? [isRequiredValidator] : []), ...validators];\n\n  return (\n    <Field name={name} validate={validateField(enhancedValidators)}>\n      {(formikProps) => {\n        const { form, field } = formikProps;\n        const error = form.touched[field.name] && form.errors[field.name];\n\n        return (\n          <DatePicker\n            {...formikProps.field}\n            onChange={(value) => {\n              formikProps.form.setFieldValue(name, value);\n            }}\n            label={label}\n            variant=\"outlined\"\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                {...otherProps}\n                helperText={error || ''}\n                error={Boolean(error)}\n              />\n            )}\n          />\n        );\n      }}\n    </Field>\n  );\n};\n\nDatePickerFormik.propTypes = propTypes;\nDatePickerFormik.defaultProps = defaultProps;\n\nexport default DatePickerFormik;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextFieldFormik from '../TextFieldFormik';\nimport { MenuItem } from '@mui/material';\n\nconst propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  children: PropTypes.node,\n};\n\nconst defaultProps = {\n  options: null,\n  children: null,\n};\n\nconst SelectFormik = ({ options, children, ...otherProps }) => {\n  return (\n    <TextFieldFormik select {...otherProps} defaultValue=\"\">\n      {options &&\n        options.map((option) => (\n          <MenuItem key={option} value={option}>\n            {option}\n          </MenuItem>\n        ))}\n      {children}\n    </TextFieldFormik>\n  );\n};\n\nSelectFormik.propTypes = propTypes;\nSelectFormik.defaultProps = defaultProps;\n\nexport default SelectFormik;\n","export default __webpack_public_path__ + \"static/media/hr_net_logo.28da81e4.svg\";","import { AppBar, Box, Toolbar, styled, Typography } from '@mui/material';\nimport { visuallyHidden } from '@mui/utils';\n\nimport hrNetLogo from '../../images/hr_net_logo.svg';\n\nconst Offset = styled('div')(({ theme }) => theme.mixins.toolbar);\n\nconst Layout = ({ action, children }) => {\n  return (\n    <>\n      <AppBar sx={{ backgroundColor: 'white' }}>\n        <Toolbar sx={{ justifyContent: 'space-between' }}>\n          <Box component=\"img\" src={hrNetLogo} alt=\"\" sx={{ maxHeight: 48, m: 1 }} />\n\n          <Typography variant=\"h1\" style={visuallyHidden}>\n            HR Net\n          </Typography>\n\n          {action}\n        </Toolbar>\n      </AppBar>\n      <Offset />\n      <Box component=\"main\" sx={{ p: 5 }}>\n        {children}\n      </Box>\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { createContext, useState } from 'react';\nimport { format } from 'date-fns';\n\nexport const EmployeesContext = createContext({});\nEmployeesContext.displayName = 'EmployeesContext';\n\nconst EmployeesProvider = ({ children }) => {\n  const [employees, setEmployees] = useState([]);\n\n  const saveEmployee = (employee) => {\n    setEmployees([\n      ...employees,\n      {\n        ...employee,\n        birthDate: format(employee.birthDate, 'yyyy/MM/dd'),\n        startDate: format(employee.startDate, 'yyyy/MM/dd'),\n      },\n    ]);\n  };\n\n  return (\n    <EmployeesContext.Provider value={{ employees, saveEmployee }}>\n      {children}\n    </EmployeesContext.Provider>\n  );\n};\n\nexport default EmployeesProvider;\n","import { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport {\n  Box,\n  Button,\n  Card,\n  MenuItem,\n  styled,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n} from '@mui/material';\n\nimport { isDate, isZipCode } from '../services';\nimport { STATES } from '../constants';\nimport TextFieldFormik from '../components/TextFieldFormik';\nimport DatePickerFormik from '../components/DatePickerFormik';\nimport SelectFormik from '../components/SelectFormik';\nimport { ROUTES } from '../router';\nimport Layout from '../components/Layout';\nimport { EmployeesContext } from '../contexts';\n\nconst EmployeeCreateScreen = () => {\n  const history = useHistory();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { saveEmployee } = useContext(EmployeesContext);\n\n  const handleCloseModal = () => setIsModalOpen(false);\n\n  const goToEmployeesList = () => {\n    history.push(ROUTES.EMPLOYEE.INDEX);\n  };\n\n  const initialValues = {\n    firstName: '',\n    lastName: '',\n    birthDate: '',\n    startDate: '',\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    department: '',\n  };\n\n  const Grid = styled('div')(({ theme }) => ({\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr',\n    gap: theme.spacing(4),\n  }));\n\n  return (\n    <Layout\n      action={\n        <Button variant=\"contained\" component={Link} to={ROUTES.EMPLOYEE.INDEX}>\n          Employees list\n        </Button>\n      }\n    >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values, formikHelpers) => {\n          saveEmployee(values);\n          formikHelpers.resetForm();\n          setIsModalOpen(true);\n        }}\n      >\n        {() => (\n          <Card sx={{ m: 'auto', px: 8, py: 4 }}>\n            <Typography variant=\"h2\" sx={{ mb: 4, textAlign: 'center' }}>\n              Create employee\n            </Typography>\n            <Form>\n              <Grid>\n                <TextFieldFormik name=\"firstName\" label=\"First name\" fullWidth isRequired />\n\n                <TextFieldFormik name=\"lastName\" label=\"Last name\" fullWidth isRequired />\n\n                <DatePickerFormik\n                  name=\"birthDate\"\n                  label=\"Date of birth\"\n                  fullWidth\n                  isRequired\n                  validators={[isDate]}\n                />\n\n                <DatePickerFormik\n                  name=\"startDate\"\n                  label=\"Start date\"\n                  fullWidth\n                  sx={{ gridColumn: 1 }}\n                  isRequired\n                  validators={[isDate]}\n                />\n\n                <SelectFormik\n                  name=\"department\"\n                  label=\"Department\"\n                  fullWidth\n                  isRequired\n                  options={['Sales', 'Marketing', 'Engineering', 'Human Resources', 'Legal']}\n                />\n\n                <Typography variant=\"h5\" component=\"h3\">\n                  Address\n                </Typography>\n\n                <TextFieldFormik\n                  name=\"street\"\n                  label=\"Street\"\n                  fullWidth\n                  sx={{ gridColumn: '1 / span 2' }}\n                  isRequired\n                />\n\n                <TextFieldFormik name=\"city\" label=\"City\" fullWidth isRequired />\n\n                <SelectFormik name=\"state\" label=\"State\" fullWidth isRequired>\n                  {STATES.map((state) => (\n                    <MenuItem key={state.abbreviation} value={state.abbreviation}>\n                      {state.name}\n                    </MenuItem>\n                  ))}\n                </SelectFormik>\n\n                <TextFieldFormik\n                  name=\"zipCode\"\n                  label=\"Zip Code\"\n                  fullWidth\n                  isRequired\n                  validators={[isZipCode]}\n                />\n              </Grid>\n\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 8 }}>\n                <Button type=\"submit\" variant=\"contained\" size=\"large\">\n                  Save\n                </Button>\n              </Box>\n            </Form>\n          </Card>\n        )}\n      </Formik>\n\n      <Dialog open={isModalOpen}>\n        <DialogTitle sx={{ textAlign: 'center' }}>Employee created!</DialogTitle>\n        <DialogActions>\n          <Button onClick={handleCloseModal}>Add new employee</Button>\n          <Button onClick={goToEmployeesList} autoFocus variant=\"contained\">\n            Go to employees list\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Layout>\n  );\n};\n\nexport default EmployeeCreateScreen;\n","import { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, Typography } from '@mui/material';\nimport { Table } from '@codbear/reactable';\n\nimport Layout from '../components/Layout';\nimport { ROUTES } from '../router';\nimport { EmployeesContext } from '../contexts';\n\nconst columns = [\n  {\n    dataField: 'firstName',\n    header: 'First name',\n    isSortable: true,\n  },\n  {\n    dataField: 'lastName',\n    header: 'Last name',\n    isSortable: true,\n  },\n  {\n    dataField: 'birthDate',\n    header: 'Birthdate',\n    isSortable: true,\n  },\n  {\n    dataField: 'startDate',\n    header: 'Start date',\n    isSortable: true,\n  },\n  {\n    dataField: 'department',\n    header: 'Department',\n    isSortable: true,\n  },\n  {\n    dataField: 'street',\n    header: 'Street',\n    isSortable: true,\n  },\n  {\n    dataField: 'city',\n    header: 'City',\n    isSortable: true,\n  },\n  {\n    dataField: 'state',\n    header: 'State',\n    isSortable: true,\n  },\n  {\n    dataField: 'zipCode',\n    header: 'ZIP code',\n    isSortable: true,\n  },\n];\n\nconst EmployeeListScreen = () => {\n  const { employees } = useContext(EmployeesContext);\n  const [itemsPerPage, setItemsPerPage] = useState(25);\n\n  return (\n    <Layout\n      action={\n        <Button variant=\"contained\" component={Link} to={ROUTES.EMPLOYEE.CREATE}>\n          Add new employee\n        </Button>\n      }\n    >\n      <Card sx={{ m: 'auto', px: 2, py: 4 }}>\n        <Typography variant=\"h2\" sx={{ textAlign: 'center' }}>\n          Current Employees\n        </Typography>\n\n        <Table\n          data={employees}\n          columns={columns}\n          hasSearchBar\n          itemsPerPage={itemsPerPage}\n          onChangeItemsPerPage={setItemsPerPage}\n        />\n      </Card>\n    </Layout>\n  );\n};\n\nexport default EmployeeListScreen;\n","import { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport ROUTES from '../../constants/routes';\nimport { EmployeeCreateScreen, EmployeeListScreen } from '../../../screens';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path={ROUTES.EMPLOYEE.CREATE}>\n        <EmployeeCreateScreen />\n      </Route>\n      <Route path={ROUTES.EMPLOYEE.INDEX}>\n        <EmployeeListScreen />\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import { LocalizationProvider } from '@mui/lab';\nimport DateAdapter from '@mui/lab/AdapterDateFns';\n\nimport { Router } from './router';\nimport { EmployeesProvider } from './contexts';\n\nconst App = () => {\n  return (\n    <EmployeesProvider>\n      <LocalizationProvider dateAdapter={DateAdapter}>\n        <Router />\n      </LocalizationProvider>\n    </EmployeesProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}